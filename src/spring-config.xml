<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context.xsd
	http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop.xsd
	http://www.springframework.org/schema/tx
	http://www.springframework.org/schema/tx/spring-tx.xsd">
    <!-- 自动扫描Spring注解配置,扫描com包下的所有注释类
        context:component-scan ： 可以扫描到类上面和属性上面的和方法上面的注解
		context:annotation-config： 可以扫描只是属性上面的注解-->
    <context:component-scan base-package="com"/>
    <!--<context:annotation-config></context:annotation-config>-->
    <!-- 引入属性文件 -->
    <context:property-placeholder location="classpath:jdbc.properties"/>

    <!-- 配置数据源：使用C3P0方式（推荐） -->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="${jdbc.driverClass}"/>
        <property name="jdbcUrl" value="${jdbc.url}"/>
        <property name="user" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>


    <!--配置hibernate里面的sessionFactory在服务器启动创建-->
    <bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
        <!--配置hibernate的配置文件-->
        <!--<property name="configLocation" value="classpath:hibernate.cfg.xml"></property>-->

        <property name="dataSource" ref="dataSource"/>

        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
                <prop key="hibernate.show_sql">true</prop>
                <prop key="hibernate.format_sql">true</prop>
                <prop key="hibernate.hbm2ddl.auto">update</prop>
                <!--整合spring不配置，使用SpringSessionContext，配置就使用ThreadLocalSessionContext-->
                <!--<prop key="hibernate.current_session_context_class">thread</prop>-->
            </props>
        </property>

        <property name="mappingResources">
            <list>
                <value>com/entity/UsersEntity.hbm.xml</value>
            </list>
        </property>
    </bean>

    <!--1.配置事务管理器-->
    <bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>
    <!--开启事务-->
    <!--<tx:annotation-driven transaction-manager="transactionManager"/>-->

    <!--2.配置事务增强-->
    <tx:advice id="txadvice" transaction-manager="transactionManager">
        <tx:attributes>
            <!--设置事务操作的方法匹配规则-->
            <tx:method name="login" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="add" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="find" propagation="REQUIRED" rollback-for="Exception"/>
        </tx:attributes>
    </tx:advice>
    <!--3.配置切面-->
    <aop:config>
        <!--切入点-->
        <!--其中第一个*代表返回值(public等)，第二*代表dao下子包，第三个*代表方法名，“（..）”代表方法参数。-->
        <aop:pointcut id="mypointcut" expression="execution(* com.service.impl.*.*(..))"/>
        <!--配置切面-->
        <aop:advisor advice-ref="txadvice" pointcut-ref="mypointcut"/>
    </aop:config>


    <bean id="userDAOImpl" class="com.dao.impl.UserDaoImpl">
        <property name="sessionFactory" ref="sessionFactory"/>
        <property name="hibernateTemplate" ref="hibernateTemplate"/>
    </bean>

    <bean id="hibernateTemplate" class="org.springframework.orm.hibernate4.HibernateTemplate">
        <property name="sessionFactory" ref="sessionFactory"></property>
    </bean>

    <bean id="userBiz" class="com.service.impl.UserService">
        <property name="userDAO" ref="userDAOImpl"/>
    </bean>
    <bean id="umAction" class="com.action.UserManagerAction" scope="prototype">
        <property name="userBiz" ref="userBiz"/>
    </bean>


</beans>